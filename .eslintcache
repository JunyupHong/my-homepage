[{"/Users/junyup/Develop/Project.Web/my-homepage/src/index.tsx":"1","/Users/junyup/Develop/Project.Web/my-homepage/src/App.tsx":"2"},{"size":230,"mtime":1608879915563,"results":"3","hashOfConfig":"4"},{"size":3633,"mtime":1608905787497,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"j85cxh",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/junyup/Develop/Project.Web/my-homepage/src/index.tsx",[],["12","13"],"/Users/junyup/Develop/Project.Web/my-homepage/src/App.tsx",["14","15"],"import React, { useEffect, useRef } from 'react';\nimport './App.scss';\nimport * as THREE from 'three';\nimport { DragControls } from 'three/examples/jsm/controls/DragControls';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n\nfunction App() {\n    \n    const canvas = useRef<HTMLDivElement>(null);\n    const scene: THREE.Scene = new THREE.Scene();\n    const camera: THREE.PerspectiveCamera = new THREE.PerspectiveCamera(75, 0, 0.1, 1000);\n    const renderer: THREE.Renderer = new THREE.WebGLRenderer({ antialias: true });\n    const heartShape = new THREE.Shape();\n    const x = 0, y = 0;\n    let tick = 0;\n    const update = () => {\n        tick++;\n        requestAnimationFrame(update);\n        heartShape.moveTo( 5, 5 );\n        if (tick % 5 === 0) camera.position.z = 3*Math.sin(tick) + 100;\n        // camera.position.y += Math.sin(tick * 0.1) / 3;\n\n        renderer.render(scene, camera);\n    };\n    \n    useEffect(() => {\n        if (!canvas || !canvas.current) return;\n        const width = canvas.current.clientWidth;\n        const height = canvas.current.clientHeight;\n        \n        renderer.setSize(width, height);\n        canvas.current.appendChild(renderer.domElement);\n        \n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        camera.position.z = 100;\n\n        \n        heartShape.moveTo( x + 5, y - 5 );\n        heartShape.bezierCurveTo( x + 5, y - 5, x + 4, y, x, y );\n        heartShape.bezierCurveTo( x - 6, y, x - 6, y - 7,x - 6, y - 7 );\n        heartShape.bezierCurveTo( x - 6, y - 11, x - 3, y - 15.4, x + 5, y - 19 );\n        heartShape.bezierCurveTo( x + 12, y - 15.4, x + 16, y - 11, x + 16, y - 7 );\n        heartShape.bezierCurveTo( x + 16, y - 7, x + 16, y, x + 10, y );\n        heartShape.bezierCurveTo( x + 7, y, x + 5, y - 5, x + 5, y - 5 );\n        const geometry = new THREE.ShapeGeometry( heartShape );\n        const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n        const mesh = new THREE.Mesh( geometry, material ) ;\n        scene.add( mesh );\n\n        const controls = new DragControls( [mesh], camera, renderer.domElement );\n\n        // add event listener to highlight dragged objects\n\n        controls.addEventListener( 'dragstart', event => {\n            console.log(event)\n            console.log(event.object.material)\n            event.object.material.color.set(0xaa0000);\n        });\n\n        controls.addEventListener( 'dragend', function ( event ) {\n            event.object.material.color.set( 0xff0000 );\n        });\n\n        \n\n        // const geometry = new THREE.BufferGeometry();\n        // const vertices = new Float32Array([\n        //     -1.0,\n        //     -1.0,\n        //     1.0,\n        //     1.0,\n        //     -1.0,\n        //     1.0,\n        //     1.0,\n        //     1.0,\n        //     1.0,\n\n        //     1.0,\n        //     1.0,\n        //     1.0,\n        //     -1.0,\n        //     1.0,\n        //     1.0,\n        //     -1.0,\n        //     -1.0,\n        //     1.0,\n        // ]);\n\n        // geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        // const material = new THREE.MeshBasicMaterial({ color: 0xcccccc });\n        // const mesh = new THREE.Mesh(geometry, material);\n\n        // scene.add(mesh);\n        // console.log(scene);\n\n        update();\n\n\n\n    }, []);\n\n    return (\n        <div className=\"app\" ref={canvas}>\n            <header className=\"app-header\"></header>\n            <section className=\"app-section\"></section>\n            <footer className=\"app-footer\"></footer>\n        </div>\n    );\n}\n\nexport default App;\n",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":5,"column":10,"nodeType":"22","messageId":"23","endLine":5,"endColumn":23},{"ruleId":"24","severity":1,"message":"25","line":102,"column":8,"nodeType":"26","endLine":102,"endColumn":10,"suggestions":"27"},"no-native-reassign",["28"],"no-negated-in-lhs",["29"],"@typescript-eslint/no-unused-vars","'OrbitControls' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'camera', 'heartShape', 'renderer', 'scene', and 'update'. Either include them or remove the dependency array.","ArrayExpression",["30"],"no-global-assign","no-unsafe-negation",{"desc":"31","fix":"32"},"Update the dependencies array to be: [camera, heartShape, renderer, scene, update]",{"range":"33","text":"34"},[3364,3366],"[camera, heartShape, renderer, scene, update]"]